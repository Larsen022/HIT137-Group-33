def adjust_shift(shift):
    if shift % 13 == 0:
        return shift + 1
    return shift

def encrypt_char(c, n, m):
    if 'a' <= c <='z':
        if c <= 'm':
            shift = adjust_shift(n * m)
            return chr(((ord(c) - ord('a') + shift) % 13) + ord('a'))
        else:
            shift = adjust_shift(n + m)
            return chr(((ord(c) - ord('n') - shift) % 13) + ord('n'))
    elif 'A' <= c <= 'Z':
        if c <= 'M':
            shift = adjust_shift(n)
            return chr(((ord(c) - ord('A') - shift) % 13) + ord('A'))
        else:
            shift = adjust_shift(m ** 2)
            return chr(((ord(c) - ord('N') + shift) % 13) + ord('N'))
    else:
        return c
    
def decrypt_char(c, n, m):
    if 'a' <= c <= 'z':
        if c <= 'm':
            shift = adjust_shift(n * m)
            return chr(((ord(c) - ord('a') - shift) % 13) + ord('a'))
        else:
            shift = adjust_shift(n + m)
            return chr(((ord(c) - ord('n') + shift) % 13) + ord('n'))
    elif 'A' <= c <= 'Z':
        if c <= 'M':
            shift = adjust_shift(n)
            return chr(((ord(c) - ord('A') + shift) % 13) + ord('A'))
        else:
            shift = adjust_shift(m ** 2)
            return chr(((ord(c) - ord('N') - shift) % 13) + ord('N'))
    else:
        return c

def encrypt_text(text, n, m):
    return ''.join(encrypt_char(c, n, m) for c in text)

def decrypt_text(text, n, m):
    return ''.join(decrypt_char(c, n, m) for c in text)

def check_correctness(original, decrypted):
    return original == decrypted

def main():
    mode = input("Press 'e' to encrypt or 'd' to decrypt: ").lower()
    n = int(input("Enter value for n: "))
    m = int(input("Enter value for m: "))
    if mode == 'e':
        with open("raw_text.txt", "r") as f:
            original_text = f.read()
        encrypted = encrypt_text(original_text, n, m)
        with open("encrypted_text.txt", "w") as f:
            f.write(encrypted)
        print("Encryption complete.")
        decrypted = decrypt_text(encrypted, n, m)
        if check_correctness(original_text, decrypted):
            print("Encryption and Decryption Match.")
        else:
            print("Something went wrong.")
    elif mode == 'd':
        with open ("encrypted_text.txt", "r") as f:
            encrypted = f.read()
        decrypted = decrypt_text(encrypted, n, m)
        with open("decrypted_text.txt", "w") as f:
            f.write(decrypted)
        print("Decryption finished.")
        try:
            with open("raw_text.txt", "r") as f:
                original_text = f.read()
            if check_correctness(original_text, decrypted):
                print("Decrypted text matches original")
            else:
                print("Decrypted Text does not match original.")
        except FileNotFoundError:
            print("Original File not found, skipping check.")
    else:
        print("Invalid input.")

if __name__ == "__main__":
    main()

#This now works, will add notes soon
